// Write a program to simulate page replacement algorithms using Least Recently Used (LRU).

import java.util.Scanner;

class LRU {
    int[] pages, frames, recent;
    int numPages, numFrames, pageFaults = 0;
    Scanner scanner = new Scanner(System.in);

    // Read the page table and frame size
    void readInput() {
        System.out.print("Please enter the number of Frames: ");
        numFrames = scanner.nextInt();
        frames = new int[numFrames];  // Frame storage
        recent = new int[numFrames];  // Track recently used frames

        System.out.print("Please enter the length of the Reference string: ");
        numPages = scanner.nextInt();
        pages = new int[numPages];    // Page reference sequence

        System.out.println("Please enter the reference string: ");
        for (int i = 0; i < numPages; i++) {
            pages[i] = scanner.nextInt();
        }

        // Initialize frames to -1 (empty)
        for (int i = 0; i < numFrames; i++) {
            frames[i] = -1;
        }
    }

    // Display the current frame status
    void displayFrames() {
        for (int frame : frames) {
            if (frame == -1) {
                System.out.print("[ ] ");
            } else {
                System.out.print("[" + frame + "] ");
            }
        }
        System.out.println();
    }

    // Implement LRU algorithm
    void applyLRU() {
        for (int currentPageIndex = 0; currentPageIndex < numPages; currentPageIndex++) {
            int currentPage = pages[currentPageIndex];
            boolean hit = false;

            // Check if the page is already in a frame
            for (int i = 0; i < numFrames; i++) {
                if (frames[i] == currentPage) {
                    hit = true; // Page is already loaded, so it's a "hit"
                    break;
                }
            }

            // If no hit, we have a "page fault" and must replace a page
            if (!hit) {
                int replaceIndex = -1;

                // Check for an empty frame first
                for (int i = 0; i < numFrames; i++) {
                    if (frames[i] == -1) {
                        replaceIndex = i; // Place page in the empty frame
                        break;
                    }
                }

                // If no empty frame, replace the least recently used page
                if (replaceIndex == -1) {
                    // Initialize recent usage array for tracking
                    for (int i = 0; i < numFrames; i++) {
                        recent[i] = 0;
                    }

                    // Mark pages in frames that were used recently
                    for (int back = currentPageIndex - 1, used = 1; used < numFrames && back >= 0; used++, back--) {
                        for (int i = 0; i < numFrames; i++) {
                            if (frames[i] == pages[back]) {
                                recent[i] = 1; // Recently used page
                                break;
                            }
                        }
                    }

                    // Find the frame with the least recently used page
                    for (int i = 0; i < numFrames; i++) {
                        if (recent[i] == 0) {
                            replaceIndex = i;
                            break;
                        }
                    }
                }

                // Replace page in the chosen frame
                frames[replaceIndex] = currentPage;
                pageFaults++; // Count this as a page fault
            }

            // Display the current page and frames
            System.out.print("Page: " + currentPage + " ");
            displayFrames();
        }

        // Display the number of page faults
        System.out.println("\nNumber of page faults: " + pageFaults);
    }

    // Main method to execute the program
    public static void main(String[] args) {
        LRU lruAlgorithm = new LRU();
        lruAlgorithm.readInput();
        lruAlgorithm.applyLRU();
    }
}
