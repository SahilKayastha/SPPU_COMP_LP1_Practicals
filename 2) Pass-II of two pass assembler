//Implement Pass-II of two pass assembler for pseudo-machine in Java using object oriented features. The output of assignment-1 (intermediate file and symbol table) should be input for this assignment.


import java.io.*;

public class Pass2 {
    static int[] sadd = new int[10], ladd = new int[10]; // Symbol and Literal addresses
    static String[] sv = new String[10], lv = new String[10]; // Symbol and Literal tables

    public static void main(String[] args) {
        try {
            loadTable("ST.txt", sv, sadd);  // Load Symbol Table
            loadTable("LT.txt", lv, ladd);  // Load Literal Table

            BufferedReader br = new BufferedReader(new FileReader("IM.txt"));
            PrintWriter pw = new PrintWriter("PASS2.txt");
            String line;

            while ((line = br.readLine()) != null) {
                String[] parts = line.split(" ");

                if (parts.length < 2) {
                    // Skip if the line has fewer than 2 tokens
                    continue;
                }

                switch (parts[0]) {
                    case "IS":
                        if (parts.length == 4) {  // IS statements with 4 parts
                            int opcode = Integer.parseInt(parts[1]);
                            int reg = Integer.parseInt(parts[2]);
                            String operand = parts[3];

                            if (operand.startsWith("S")) {
                                // Handle symbols
                                int symIndex = Integer.parseInt(operand.substring(1));
                                pw.println(opcode + " " + reg + " " + sadd[symIndex]);
                            } else if (operand.startsWith("L")) {
                                // Handle literals
                                int litIndex = Integer.parseInt(operand.substring(1));
                                pw.println(opcode + " " + reg + " " + ladd[litIndex]);
                            } else {
                                // Handle immediate values (e.g., IS 1 1 2)
                                pw.println(opcode + " " + reg + " " + operand);
                            }
                        }
                        break;
                    case "DL":
                        if (parts.length == 3) {  // DL statements with 3 parts
                            pw.println("00 0 " + parts[2]);  // Handle DC/DS declaration
                        }
                        break;
                    case "AD":
                        if (parts[1].equals("2")) {
                            // Handle END directive (AD 2)
                            pw.println();  // Write empty line
                        }
                        break;
                }
            }
            br.close();
            pw.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to load either Symbol or Literal table from file
    private static void loadTable(String fileName, String[] table, int[] addr) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        String line;
        int count = 0;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split("\t");
            if (parts.length >= 3) {  // Ensure table lines have at least 3 parts
                table[count] = parts[1];
                addr[count++] = Integer.parseInt(parts[2]);
            }
        }
        br.close();
    }
}


/*
IM.txt
AD 1 100
IS 4 1 S0 
IS 4 2 S1 
IS 4 3 L0 
IS 4 4 L1 
IS 1 1 2 
IS 2 1 S0 
DL 1 
DL 2 
AD 2

ST.txt
0	A	106
1	B	107


LT.txt
0	=2	111
1	=3	112

*/
